/****************************************************************************
 *  Copyright: National ICT Australia,  2007 - 2011                         *
 *  Developed at the ATP lab, Networked Systems research theme              *
 *  Author(s): Athanassios Boulis, Yuriy Tselishchev                        *
 *  This file is distributed under the terms in the attached LICENSE file.  *
 *  If you do not find this file, copies can be found by writing to:        *
 *                                                                          *
 *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia             *
 *      Attention:  License Inquiry.                                        *
 *                                                                          *
 ****************************************************************************/


#include "ThroughputTest.h"
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <iostream>
#include <random>
#include <fstream>
#include <algorithm>
#include <string>
#include <sstream>

Define_Module(ThroughputTest);

using namespace std;

int numero = 0;
int tamanho_janela = 10;
int contadorleitura = 1;
double janela_temperatura[10];
double janela_umidade[10];
int janela_leitura[10];

void ThroughputTest::startup()
{
//	srand(time(NULL));
	packet_rate = par("packet_rate");
	recipientAddress = par("nextRecipient").stringValue();
	startupDelay = par("startupDelay");
		
	//setTimer(SWITCH_CHANNEL, slot_len); //switch the channel every 10ms
	double startupDelay_rand = 0;//rand()%10;
	
	packet_spacing = packet_rate > 0 ? 1.0 / float (packet_rate) : -1;
	dataSN = 1;

	
	if (packet_spacing > 0) {
		setTimer(SEND_PACKET, packet_spacing + startupDelay_rand + 1.5);
	}
	else
		// Diego
		trace() << "Not sending packets";

	declareOutput("Packets received per node");
	
	
	
}

void ThroughputTest::fromNetworkLayer(DataPacket * rcvPacket,
		const char *source, double rssi, double lqi)
{
	int sequenceNumber = rcvPacket->getSequenceNumber();
	double* data = rcvPacket->getDataPacket();

	//SINK NODE
	string addr(SELF_NETWORK_ADDRESS,1);
	if (addr.compare("0") == 0) {
	
		//data packet received
		trace() << "Received packet " << sequenceNumber << " from node " << source << ": " << rssi << " " << lqi << " fromNetworkLayer";
		
		if (numero < tamanho_janela){
			
			
	
				if (numero == 0){
					janela_temperatura[numero] = data[3];
					janela_umidade[numero] = data[4];
					janela_leitura[numero] = data[5];
				
					
					numero++; 
					
					}
					
				
				//Evita valores duplicados
				if (numero > 0){
					if (janela_leitura[numero-1] < data[5]){
						
						janela_temperatura[numero] = data[3];
						janela_umidade[numero] = data[4];
						janela_leitura[numero] = data[5];
						
						numero++; 
						
						
						
						
						} 
					
					}
					
					trace() << "Entrou: ";
					trace() <<  numero;
			
                }

			
		if(numero == tamanho_janela ){
			
			trace() << "Numero:" << numero;
			numero = 0;
			if (janela_leitura[numero-1] < data[5]){
				
						trace() << "Final: ";
					
						
						janela_temperatura[numero] = data[3];
						janela_umidade[numero] = data[4];
						janela_leitura[numero] = data[5];
						
						//Abre arquivos
						string file_results_name = "arquivo_results2.txt";
						string results_file = "final_results.txt";
			
						ofstream send_data;
						send_data.open(file_results_name);	
					   
					   for (int i = 0; i<tamanho_janela; i++){
									
								send_data << janela_leitura[i] << "," << janela_temperatura[i] << "," << janela_umidade[i] << endl;
									
								
									}
								
						
						send_data.close();
						
						stringstream sstm;
						sstm << tamanho_janela;
						
						
						string command = "python3 deteccao_anomalia.py < "+file_results_name+" > "+results_file+" "+sstm.str();
						system(command.c_str()); 
						trace() << command << endl;
						
						
						
						ifstream file_results(results_file);
						string line;
						if (file_results.is_open()){
							
								while ( getline (file_results,line) ) {
								trace() << line << endl;
								 
					}
					
				}
				  
						file_results.close();
						

						

									
						} 
			
			
			
			
            }
	
		
		
		
		
		packets_received++;
	} 
	//END NODE
	else {
		
	}
	//free(data);
}

void ThroughputTest::timerFiredCallback(int index)
{
	
	switch (index){
		case SEND_PACKET: {
			 
			string addr(SELF_NETWORK_ADDRESS);
			
			
			//is an END NODE
			if (addr.compare("0") != 0) {
				
				int nodeId = stoi(SELF_NETWORK_ADDRESS);
				
				string arquivo = "/home/miqueas/Dados/Dados_Intel.txt";
				trace() << "Sending packet (nÃ³"<< " " << addr << ")" << dataSN;
				
				packets_sent++;
                FILE *file;
                file = fopen(arquivo.c_str(),"r");
                double *data = new double[10];
               
              
                int leitura;
                double temperatura, umidade;
                char frase[100];
                
		        while(fgets(frase,100,file) != NULL)	 { 
							
							 fscanf(file,"%d,%lf,%lf", &leitura,&temperatura, &umidade);

							 
		                     if (leitura == contadorleitura){
									
                                //     trace()<< "entrou aqui dentro do leitura";
                                     data[0] = 0;
				                     data[1] = prr_beacon_end;
				                     data[2] = RNP;
                                     data[3] = temperatura;
                                     data[4] = umidade;
									 data[5] = leitura;
									 
									 
                                    DataPacket* data_packet = createDataPacket(data, dataSN, 80);
                               
									
                                    toNetworkLayer(data_packet, (const char*)("0"));
                                    dataSN++;
                                    cont_tx++;
									contadorleitura++;

									break;
									
                                    
								}
							
					
                             
	                 }

					 
					
					
					fclose(file);
					
					
					
					setTimer(SEND_PACKET, packet_spacing);
				
				
			    }

			

           
                    
			
            
		}
	}
}


void ThroughputTest::sendAck(int packet_id)
{
	//trace() << "Sending ack for packet " << packet_id;
    double *data = new double[10];
	data[0] = packet_id;
	DataPacket* data_packet = createDataPacket(data, ack_seq, 5);  
	toNetworkLayer(data_packet, (const char*)("1"));
	acks_sent++;
	//trace() << "Acks sent: " << acks_sent;
}


// This method processes a received carrier sense interupt. Used only for demo purposes
// in some simulations. Feel free to comment out the trace command.
void ThroughputTest::handleRadioControlMessage(RadioControlMessage *radioMsg)
{
	switch (radioMsg->getRadioControlMessageKind()) {
		case CARRIER_SENSE_INTERRUPT:
			trace() << "CS Interrupt received! current RSSI value is: " << radioModule->readRSSI();
                        break;
	}
}

